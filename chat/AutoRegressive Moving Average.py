# ARMA (AutoRegressive Moving Average) モデルは、自己回帰 (AR) モデルと移動平均 (MA) モデルを組み合わせた統計モデルで、時系列データの予測や分析に使用されます。
# ARMAモデルは、過去の観測値の自己回帰成分と過去の誤差項の移動平均成分を組み合わせて、未来のデータを予測します。
# 以下に、Pythonコードと具体例を示します。この例では、ARMA(2, 1) モデルを使用してサンプルデータを生成し、プロットしています。
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm

# サンプルデータを生成
np.random.seed(0)
n = 200  # データポイントの数
noise = np.random.normal(0, 1, n)  # ノイズ

# ARMA(2, 1)モデルのパラメータ
phi1, phi2 = 0.5, -0.2  # AR成分の係数
theta1 = 0.8  # MA成分の係数

# ARMA(2, 1)モデルのデータ生成
data = np.zeros(n)
for i in range(2, n):
    data[i] = phi1 * data[i - 1] + phi2 * data[i - 2] + noise[i] + theta1 * noise[i - 1]

# データフレームに格納
df = pd.DataFrame({'Data': data})

# ARMAモデルのフィッティング
# エラーメッセージから statsmodels.tsa.api モジュールに ARMA クラスが存在しないことがわかります。実際には、statsmodels ライブラリは以前のバージョンからモデルの構築方法が変更されています。
# 新しいバージョンの statsmodels では、ARMA モデルは ARIMA モデルを使って構築されるようになりました。
# このコードでは、ARIMA モデルを使って ARMA(2, 1) モデルを構築しています。ARIMA モデルの order パラメータで p=2（AR次数）、d=0（差分次数）、q=1（MA次数）を指定しています。
model = sm.tsa.ARIMA(df['Data'], order=(2, 0, 1))
result = model.fit()

# プロット
display(result.summary())
plt.figure(figsize=(10, 6))
plt.plot(df['Data'], label='Data')
plt.plot(result.fittedvalues, color='red', label='Fitted Values (ARMA)')
plt.title('ARMA(2, 1) Model')
plt.xlabel('Time')
plt.ylabel('Data')
plt.legend()
plt.grid(True)
plt.show()

# このコードは、ARMA(2, 1) モデルを使用してサンプルデータをフィッティングし、データとフィットされたモデルをプロットするものです。以下は各部分の説明です：

# サンプルデータの生成:
# np.random.seed(0) を使用して乱数のシードを固定します。これにより再現性が確保されます。
# n は生成するデータポイントの数です。
# noise は平均0、標準偏差1の正規分布から抽出されたノイズです。

# ARMA(2, 1) モデルのパラメータ:
# phi1 と phi2 は AR 成分の係数です。
# theta1 は MA 成分の係数です。

# ARMA(2, 1) モデルのデータ生成:
# data 配列は、ARMA(2, 1) モデルに従って生成されたデータです。ループを使用して、AR 成分、MA 成分、およびノイズを考慮してデータを生成します。

# データをデータフレームに格納:
# pd.DataFrame() を使用してデータをデータフレームに格納します。列名は 'Data' です。

# ARMA モデルのフィッティング:
# sm.tsa.ARIMA() を使用して ARMA モデルを作成し、データにフィットさせます。order パラメータでモデルの次数を指定します。

# プロット:
# plt.plot() を使用して元のデータとフィットされたモデルをプロットします。
# 'red' で指定したカラーでフィットされたモデルをプロットします。
# プロットのタイトルや軸ラベルを設定し、凡例とグリッドを追加します。
# このコードを実行すると、元のデータとARMA(2, 1) モデルによるフィットが同じプロット上に表示されます。モデルがデータにどれだけ適合しているかを視覚的に確認できます。



# order パラメータとはなに

# order パラメータは、ARMA モデルや ARIMA モデルを作成する際に、モデルの次数を指定するためのパラメータです。ARMA モデルや ARIMA モデルは、過去のデータポイントを使用して未来の値を予測する統計モデルであり、その性能はモデルの次数に大きく依存します。次数は、以下の2つの要素で構成されます：
# AR (AutoRegressive) 次数（p）：AR 成分の次数は、現在のデータポイントを過去のデータポイントの線形結合としてモデル化する際に使用されます。つまり、現在のデータポイントは、過去のデータポイントの重み付き合計として表されます。AR 次数は過去のデータポイントの数を示します。
# MA (Moving Average) 次数（q）：MA 成分の次数は、現在のデータポイントを過去の予測誤差（ノイズ）の線形結合としてモデル化する際に使用されます。つまり、現在のデータポイントは、過去の予測誤差の重み付き合計として表されます。MA 次数は予測誤差の数を示します。
# 一般的に、適切な次数を選択することは、モデルの性能を向上させるために重要です。次数が小さすぎると、モデルはデータの特徴を捉えきれず、次数が大きすぎると過剰適合のリスクが生じます。適切な次数の選択は、実データの特性やモデルの評価に依存し、通常は経験的な方法やモデル選択の基準に基づいて行われます。
# order パラメータは一般的に (p, d, q) の形式で指定され、p は AR 次数、d は差分次数、q は MA 次数を示します。ただし、ARMA モデルでは差分次数 d は0に設定され、ARIMA モデルで使用されます。



# result.summary()は、Pythonの統計モデリングライブラリであるStatsmodelsを使用して作成した統計モデルの要約結果を表示するためのコードです。
# Statsmodelsを使用して統計モデルをフィットさせた後、result.summary() メソッドを呼び出すと、その統計モデルに関する詳細な情報がまとまった要約テーブルとして表示されます。このテーブルには、以下のような情報が含まれています。
# モデルの要約情報: モデルの名前、使用したデータ数、パラメータ数などの基本的な情報が含まれます。
# モデル係数の統計情報: モデル内の各パラメータ（係数）に関する統計的な情報が表示されます。これには、係数の値、標準誤差、t-統計量、p-値などが含まれます。
# モデルの当てはまり度合い: モデルの適合度を示す指標として、尤度、AIC、BICなどが表示されます。
# 残差の統計情報: モデルの残差に関する統計的な情報が含まれます。残差の平均、標準偏差、最小値、最大値、25パーセンタイル、50パーセンタイル（中央値）などが表示されます。
# この要約テーブルは、統計モデルの適切性を評価し、モデルの係数や統計的な有意性を確認するのに役立ちます。特に、p-値は係数の統計的有意性を示し、小さな値ほどその係数が有意であることを示します。統計モデリングにおいて結果を評価するために重要な情報源です。
